#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
using namespace std;

struct KDL
{
    int x, y, u, v, p;
};

int n, m, x, y, j, dd[10005];
vector<KDL> v;
pair<int,int> djs[10001];

bool cmp(KDL a, KDL b)
{
    return y*a.v-x*a.u < y*b.v-x*b.u;
}

int fset(int x)
{
    if (djs[x].first!=x) return (djs[x].first=fset(djs[x].first));
    return x;
}

void gopcay(int a, int b)
{
    if (djs[a].second>djs[b].second)
        djs[b].first=a;
    if (djs[a].second<djs[b].second)
        djs[a].first=b;
    if (djs[a].second==djs[b].second)
    {
        djs[a].first=b;
        djs[b].second++;
    }
}

void findspanningtree()
{
    sort(v.begin(),v.end(),cmp);
    x=y=0;
    for (int i = 1; i <= n; i++)
    {
        djs[i].first=i;
        djs[i].second=1;
    }
    int d = 0;
    j=0;
    for (int i = 0; i < v.size(); i++)
    {
        int dinh1 = fset(v[i].x), dinh2=fset(v[i].y);
        if (dinh1!=dinh2)
        {
            d++;
            x+=v[i].v;
            y+=v[i].u;
            dd[++j]=v[i].p;
            gopcay(dinh1,dinh2);
        }
        if (d==n-1) break;
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    freopen("PROJECT.inp","r",stdin);
    freopen("PROJECT.out","w",stdout);
    cin >> n >> m;
    for (int i = 1; i <= m; i++)
    {
        int u, vs, l, c;
        cin >> u >> vs >> l >> c;
        v.push_back({u,vs,l,c,i});
    }
    x = 0, y=1;
    int tx = -1, ty=-1;
    while (x*ty!=y*tx)
    {
        tx=x;
        ty=y;
        findspanningtree();
    }
    for (int i = 1; i <= j; i++)
    {
        cout << dd[i] << " ";
    }
    return 0;
}
